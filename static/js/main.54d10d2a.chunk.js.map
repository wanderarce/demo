{"version":3,"sources":["canvas-utils.ts","use-debounce.ts","views/GraphSettingsController.tsx","views/GraphEventsController.tsx","views/GraphDataController.tsx","views/Panel.tsx","views/ClustersPanel.tsx","views/SearchField.tsx","views/GraphTitle.tsx","views/TagsPanel.tsx","views/Root.tsx","index.tsx"],"names":["TEXT_COLOR","drawLabel","context","data","settings","label","size","labelSize","font","labelFont","weight","labelWeight","width","measureText","fillStyle","fillRect","x","y","fillText","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","GraphSettingsController","children","hoveredNode","sigma","useSigma","graph","getGraph","debouncedHoveredNode","setSetting","subLabelSize","subLabel","tag","clusterLabel","beginPath","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","labelWidth","subLabelWidth","clusterLabelWidth","textWidth","Math","max","round","w","hLabel","hSubLabel","ctx","height","radius","moveTo","lineTo","quadraticCurveTo","closePath","drawRoundRect","fill","color","drawHover","getNodeDisplayData","key","hoveredColor","node","hasEdge","zIndex","image","highlighted","edge","hasExtremity","hidden","GraphEventsController","setHoveredNode","registerEvents","useRegisterEvents","clickNode","getNodeAttribute","GraphDataController","dataset","filters","clusters","keyBy","tags","nodes","forEach","addNode","omit","cluster","process","edges","element","ed","addEdge","scores","map","minDegree","min","maxDegree","forEachNode","setNodeAttribute","clear","Panel","title","initiallyDeployed","isDeployed","setIsDeployed","dom","useRef","current","parentElement","scrollTo","top","offsetTop","behavior","className","ref","type","onClick","v","duration","ClustersPanel","toggleCluster","setClusters","nodesPerCluster","useMemo","index","_","maxNodesPerCluster","values","visibleClustersCount","Object","keys","length","visibleNodesPerCluster","setVisibleNodesPerCluster","requestAnimationFrame","sortedClusters","sortBy","mapValues","nodesCount","visibleNodesCount","checked","onChange","id","htmlFor","style","background","borderColor","SearchField","search","setSearch","setValues","selected","setSelected","refreshValues","newValues","lcSearch","toLowerCase","attributes","indexOf","push","nodeDisplayData","console","log","getCamera","animate","ratio","placeholder","list","e","searchString","target","valueItem","find","onKeyPress","event","prettyPercentage","val","toFixed","GraphTitle","visibleItems","setVisibleItems","forEachEdge","_2","_3","_4","source","order","TagsPanel","toggleTag","setTags","nodesPerTag","maxNodesPerTag","visibleTagsCount","visibleNodesPerTag","setVisibleNodesPerTag","sortedTags","Infinity","backgroundImage","Root","showContents","setShowContents","dataReady","setDataReady","setDataset","filtersState","setFiltersState","fetch","then","res","json","constant","graphOptions","initialSettings","nodeProgramClasses","getNodeProgramImage","labelRenderer","defaultNodeType","defaultEdgeType","labelDensity","labelGridCellSize","labelRenderedSizeThreshold","customEnterFullScreen","customExitFullScreen","customZoomIn","customZoomOut","customZoomCenter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54d10d2a.chunk.js","sourcesContent":["import { NodeDisplayData, PartialButFor, PlainObject } from \"sigma/types\";\r\nimport { Settings } from \"sigma/settings\";\r\n\r\nconst TEXT_COLOR = \"#000000\";\r\n\r\n/**\r\n * This function draw in the input canvas 2D context a rectangle.\r\n * It only deals with tracing the path, and does not fill or stroke.\r\n */\r\nexport function drawRoundRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  radius: number,\r\n): void {\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.lineTo(x + width - radius, y);\r\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n  ctx.lineTo(x + width, y + height - radius);\r\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n  ctx.lineTo(x + radius, y + height);\r\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n  ctx.lineTo(x, y + radius);\r\n  ctx.quadraticCurveTo(x, y, x + radius, y);\r\n  ctx.closePath();\r\n}\r\n\r\n/**\r\n * Custom hover renderer\r\n */\r\nexport function drawHover(context: CanvasRenderingContext2D, data: PlainObject, settings: PlainObject) {\r\n  const size = settings.labelSize;\r\n  const font = settings.labelFont;\r\n  const weight = settings.labelWeight;\r\n  const subLabelSize = size - 2;\r\n\r\n  const label = data.label;\r\n  const subLabel = data.tag !== \"unknown\" ? data.tag : \"\";\r\n  const clusterLabel = data.clusterLabel;\r\n\r\n  // Then we draw the label background\r\n  context.beginPath();\r\n  context.fillStyle = \"#fff\";\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 2;\r\n  context.shadowBlur = 8;\r\n  context.shadowColor = \"#000\";\r\n\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  const labelWidth = context.measureText(label).width;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  const subLabelWidth = subLabel ? context.measureText(subLabel).width : 0;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  const clusterLabelWidth = clusterLabel ? context.measureText(clusterLabel).width : 0;\r\n\r\n  const textWidth = Math.max(labelWidth, subLabelWidth, clusterLabelWidth);\r\n\r\n  const x = Math.round(data.x);\r\n  const y = Math.round(data.y);\r\n  const w = Math.round(textWidth + size / 2 + data.size + 3);\r\n  const hLabel = Math.round(size / 2 + 4);\r\n  const hSubLabel = subLabel ? Math.round(subLabelSize / 2 + 9) : 0;\r\n  const hClusterLabel = Math.round(subLabelSize / 2 + 9);\r\n\r\n  drawRoundRect(context, x, y - hSubLabel - 12, w, hClusterLabel + hLabel + hSubLabel + 12, 5);\r\n  context.closePath();\r\n  context.fill();\r\n\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 0;\r\n  context.shadowBlur = 0;\r\n\r\n  // And finally we draw the labels\r\n  context.fillStyle = TEXT_COLOR;\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  context.fillText(label, data.x + data.size + 3, data.y + size / 3);\r\n\r\n  if (subLabel) {\r\n    context.fillStyle = TEXT_COLOR;\r\n    context.font = `${weight} ${subLabelSize}px ${font}`;\r\n    context.fillText(subLabel, data.x + data.size + 3, data.y - (2 * size) / 3 - 2);\r\n  }\r\n\r\n  context.fillStyle = data.color;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  context.fillText(clusterLabel, data.x + data.size + 3, data.y + size / 3 + 3 + subLabelSize);\r\n}\r\n\r\n/**\r\n * Custom label renderer\r\n */\r\nexport default function drawLabel(\r\n  context: CanvasRenderingContext2D,\r\n  data: PartialButFor<NodeDisplayData, \"x\" | \"y\" | \"size\" | \"label\" | \"color\">,\r\n  settings: Settings,\r\n): void {\r\n  if (!data.label) return;\r\n\r\n  const size = settings.labelSize,\r\n    font = settings.labelFont,\r\n    weight = settings.labelWeight;\r\n\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  const width = context.measureText(data.label).width + 8;\r\n\r\n  context.fillStyle = \"#ffffffcc\";\r\n  context.fillRect(data.x + data.size, data.y + size / 3 - 15, width, 20);\r\n\r\n  context.fillStyle = \"#000\";\r\n  context.fillText(data.label, data.x + data.size + 3, data.y + size / 3);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction useDebounce<T>(value: T, delay: number): T {\r\n  // State and setters for debounced value\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Update debounced value after delay\r\n      const handler = setTimeout(() => {\r\n        if (value !== debouncedValue) setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      // Cancel the timeout if value changes (also on delay change or unmount)\r\n      // This is how we prevent debounced value from updating if value is changed ...\r\n      // .. within the delay period. Timeout gets cleared and restarted.\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    [value, delay], // Only re-call effect if value or delay changes\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;\r\n","import { useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\n\r\nimport { drawHover } from \"../canvas-utils\";\r\nimport useDebounce from \"../use-debounce\";\r\n\r\nconst NODE_FADE_COLOR = \"#ccc\";\r\nconst EDGE_FADE_COLOR = \"#eee\";\r\n\r\nconst GraphSettingsController: FC<{ hoveredNode: string | null }> = ({ children, hoveredNode }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  // Here we debounce the value to avoid having too much highlights refresh when\r\n  // moving the mouse over the graph:\r\n  const debouncedHoveredNode = useDebounce(hoveredNode, 40);\r\n\r\n  /**\r\n   * Initialize here settings that require to know the graph and/or the sigma\r\n   * instance:\r\n   */\r\n  useEffect(() => {\r\n    sigma.setSetting(\"hoverRenderer\", (context, data, settings) =>\r\n      drawHover(context, { ...sigma.getNodeDisplayData(data.key), ...data }, settings),\r\n    );\r\n  }, [sigma, graph]);\r\n\r\n  /**\r\n   * Update node and edge reducers when a node is hovered, to highlight its\r\n   * neighborhood:\r\n   */\r\n  useEffect(() => {\r\n    const hoveredColor: string = debouncedHoveredNode ? sigma.getNodeDisplayData(debouncedHoveredNode)!.color : \"\";\r\n\r\n    sigma.setSetting(\r\n      \"nodeReducer\",\r\n      debouncedHoveredNode\r\n        ? (node, data) =>\r\n            node === debouncedHoveredNode ||\r\n            graph.hasEdge(node, debouncedHoveredNode) ||\r\n            graph.hasEdge(debouncedHoveredNode, node)\r\n              ? { ...data, zIndex: 1 }\r\n              : { ...data, zIndex: 0, label: \"\", color: NODE_FADE_COLOR, image: null, highlighted: false }\r\n        : null,\r\n    );\r\n    sigma.setSetting(\r\n      \"edgeReducer\",\r\n      debouncedHoveredNode\r\n        ? (edge, data) =>\r\n            graph.hasExtremity(edge, debouncedHoveredNode)\r\n              ? { ...data, color: hoveredColor, size: 4 }\r\n              : { ...data, color: EDGE_FADE_COLOR, hidden: true }\r\n        : null,\r\n    );\r\n  }, [debouncedHoveredNode]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphSettingsController;\r\n","import { useRegisterEvents, useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { CameraState } from \"sigma/types\";\r\n\r\nfunction getMouseLayer() {\r\n  return document.querySelector(\".sigma-mouse\");\r\n}\r\n\r\nconst GraphEventsController: FC<{ setHoveredNode: (node: string | null) => void }> = ({ setHoveredNode, children }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n  const registerEvents = useRegisterEvents();\r\n\r\n  /**\r\n   * Initialize here settings that require to know the graph and/or the sigma\r\n   * instance:\r\n   */\r\n  useEffect(() => {\r\n    debugger\r\n    registerEvents({\r\n      clickNode({ node }) {\r\n        //if (graph.getNodeAttribute(node, \"hidden\")) {   \r\n          setHoveredNode(node);\r\n        //}\r\n        if (!graph.getNodeAttribute(node, \"hidden\")) {   \r\n          //window.open(graph.getNodeAttribute(node, \"URL\"), \"_blank\");\r\n        }\r\n      },\r\n      // enterNode({ node }) {\r\n      //   setHoveredNode(node);\r\n      //   // TODO: Find a better way to get the DOM mouse layer:\r\n      //   const mouseLayer = getMouseLayer();\r\n      //   if (mouseLayer) mouseLayer.classList.add(\"mouse-pointer\");\r\n      // },\r\n      // leaveNode() {\r\n      //   //setHoveredNode(null);\r\n      //   // TODO: Find a better way to get the DOM mouse layer:\r\n      //   const mouseLayer = getMouseLayer();\r\n      //   if (mouseLayer) mouseLayer.classList.remove(\"mouse-pointer\");\r\n      // },\r\n     \r\n    });\r\n  }, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphEventsController;\r\n","import { useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { keyBy, omit } from \"lodash\";\r\n\r\nimport { Dataset, FiltersState } from \"../types\";\r\n\r\nconst GraphDataController: FC<{ dataset: Dataset; filters: FiltersState }> = ({ dataset, filters, children }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  /**\r\n   * Feed graphology with the new dataset:\r\n   */\r\n  useEffect(() => {\r\n    if (!graph || !dataset) return;\r\n\r\n    const clusters = keyBy(dataset.clusters, \"key\");\r\n    const tags = keyBy(dataset.tags, \"key\");\r\n\r\n    dataset.nodes.forEach((node) =>\r\n      graph.addNode(node.key, {\r\n        ...node,\r\n        ...omit(clusters[node.cluster], \"key\"),\r\n        image: `${process.env.PUBLIC_URL}/images/${tags[node.tag].image}`,\r\n      }),\r\n    );\r\n    \r\n    dataset.edges.forEach((element) => {\r\n      var ed = element.edge as string[];\r\n      graph.addEdge(ed[0], ed[1],{ size: 0.5 });\r\n     });\r\n\r\n    // Use degrees as node sizes:\r\n    const scores = graph.nodes().map((node) => graph.getNodeAttribute(node, \"score\"));\r\n    const minDegree = Math.min(...scores);\r\n    const maxDegree = Math.max(...scores);\r\n    const MIN_NODE_SIZE = 3;\r\n    const MAX_NODE_SIZE = 30;\r\n    graph.forEachNode((node) =>\r\n      graph.setNodeAttribute(\r\n        node,\r\n        \"size\",\r\n        ((graph.getNodeAttribute(node, \"score\") - minDegree) / (maxDegree - minDegree)) *\r\n          (MAX_NODE_SIZE - MIN_NODE_SIZE) +\r\n          MIN_NODE_SIZE,\r\n      ),\r\n    );\r\n\r\n    return () => graph.clear();\r\n  }, [graph, dataset]);\r\n\r\n  /**\r\n   * Apply filters to graphology:\r\n   */\r\n  useEffect(() => {\r\n    const { clusters, tags } = filters;\r\n  \r\n    graph.forEachNode((node, { cluster, tag }) => {\r\n      graph.setNodeAttribute(node, \"hidden\", !clusters[cluster] || !tags[tag]);\r\n    });\r\n  }, [graph, filters]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphDataController;\r\n","import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\r\nimport AnimateHeight from \"react-animate-height\";\r\n\r\nconst DURATION = 300;\r\n\r\nconst Panel: FC<{ title: JSX.Element | string; initiallyDeployed?: boolean }> = ({\r\n  title,\r\n  initiallyDeployed,\r\n  children,\r\n}) => {\r\n  const [isDeployed, setIsDeployed] = useState(initiallyDeployed || false);\r\n  const dom = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isDeployed)\r\n      setTimeout(() => {\r\n        if (dom.current) dom.current.parentElement!.scrollTo({ top: dom.current.offsetTop - 5, behavior: \"smooth\" });\r\n      }, DURATION);\r\n  }, [isDeployed]);\r\n\r\n  return (\r\n    <div className=\"panel\" ref={dom}>\r\n      <h2>\r\n        {title}{\" \"}\r\n        <button type=\"button\" onClick={() => setIsDeployed((v) => !v)}>\r\n          {isDeployed ? <MdExpandLess /> : <MdExpandMore />}\r\n        </button>\r\n      </h2>\r\n      <AnimateHeight duration={DURATION} height={isDeployed ? \"auto\" : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { sortBy, values, keyBy, mapValues } from \"lodash\";\r\n\r\nimport { Cluster, FiltersState } from \"../types\";\r\nimport { MdGroupWork } from \"react-icons/md\";\r\nimport Panel from \"./Panel\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\r\n\r\nconst ClustersPanel: FC<{\r\n  clusters: Cluster[];\r\n  filters: FiltersState;\r\n  toggleCluster: (cluster: string) => void;\r\n  setClusters: (clusters: Record<string, boolean>) => void;\r\n}> = ({ clusters, filters, toggleCluster, setClusters }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const nodesPerCluster = useMemo(() => {\r\n    const index: Record<string, number> = {};\r\n    graph.forEachNode((_, { cluster }) => (index[cluster] = (index[cluster] || 0) + 1));\r\n    return index;\r\n  }, []);\r\n\r\n  const maxNodesPerCluster = useMemo(() => Math.max(...values(nodesPerCluster)), [nodesPerCluster]);\r\n  const visibleClustersCount = useMemo(() => Object.keys(filters.clusters).length, [filters]);\r\n\r\n  const [visibleNodesPerCluster, setVisibleNodesPerCluster] = useState<Record<string, number>>(nodesPerCluster);\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index: Record<string, number> = {};\r\n      graph.forEachNode((_, { cluster, hidden }) => !hidden && (index[cluster] = (index[cluster] || 0) + 1));\r\n      setVisibleNodesPerCluster(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  const sortedClusters = useMemo(\r\n    () => sortBy(clusters, (cluster) => -nodesPerCluster[cluster.key]),\r\n    [clusters, nodesPerCluster],\r\n  );\r\n\r\n  return (\r\n    <Panel\r\n      title={\r\n        <>\r\n          <MdGroupWork className=\"text-muted\" /> Clusters\r\n          {visibleClustersCount < clusters.length ? (\r\n            <span className=\"text-muted text-small\">\r\n              {\" \"}\r\n              ({visibleClustersCount} / {clusters.length})\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      }\r\n    >\r\n      <p>\r\n        <i className=\"text-muted\">Click a cluster to show/hide related pages from the network.</i>\r\n      </p>\r\n      <p className=\"buttons\">\r\n        <button className=\"btn\" onClick={() => setClusters(mapValues(keyBy(clusters, \"key\"), () => true))}>\r\n          <AiOutlineCheckCircle /> Check all\r\n        </button>{\" \"}\r\n        <button className=\"btn\" onClick={() => setClusters({})}>\r\n          <AiOutlineCloseCircle /> Uncheck all\r\n        </button>\r\n      </p>\r\n      <ul>\r\n        {sortedClusters.map((cluster) => {\r\n          const nodesCount = nodesPerCluster[cluster.key];\r\n          const visibleNodesCount = visibleNodesPerCluster[cluster.key] || 0;\r\n          return (\r\n            <li\r\n              className=\"caption-row\"\r\n              key={cluster.key}\r\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.clusters[cluster.key] || false}\r\n                onChange={() => toggleCluster(cluster.key)}\r\n                id={`cluster-${cluster.key}`}\r\n              />\r\n              <label htmlFor={`cluster-${cluster.key}`}>\r\n                <span className=\"circle\" style={{ background: cluster.color, borderColor: cluster.color }} />{\" \"}\r\n                <div className=\"node-label\">\r\n                  <span>{cluster.clusterLabel}</span>\r\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerCluster + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </label>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default ClustersPanel;\r\n","import React, { KeyboardEvent, ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { Attributes } from \"graphology-types\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nimport { FiltersState } from \"../types\";\r\n\r\n/**\r\n * This component is basically a fork from React-sigma-v2's SearchControl\r\n * component, to get some minor adjustments:\r\n * 1. We need to hide hidden nodes from results\r\n * 2. We need custom markup\r\n */\r\nconst SearchField: FC<{ \r\n  setHoveredNode: (node: string | null) => void;\r\n  filters: FiltersState }> = ({ \r\n    setHoveredNode ,filters }) => {\r\n  const sigma = useSigma();\r\n\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [values, setValues] = useState<Array<{ id: string; label: string }>>([]);\r\n  const [selected, setSelected] = useState<string | null>(null);\r\n\r\n  \r\n  const refreshValues = () => {\r\n    const newValues: Array<{ id: string; label: string }> = [];\r\n    const lcSearch = search.toLowerCase();\r\n    if (!selected && search.length > 3) {\r\n      sigma.getGraph().forEachNode((key: string, attributes: Attributes): void => {\r\n        if(attributes.hidden){\r\n          attributes.color = \"#ccc\";\r\n        }\r\n        if (!attributes.hidden && attributes.label && attributes.label.toLowerCase().indexOf(lcSearch) === 0)\r\n           newValues.push({ id: key, label: attributes.label });\r\n       });\r\n    }\r\n    \r\n    setValues(newValues);\r\n  };\r\n\r\n  // Refresh values when search is updated:\r\n  useEffect(() => refreshValues(), [search]);\r\n\r\n  // Refresh values when filters are updated (but wait a frame first):\r\n  useEffect(() => {\r\n    requestAnimationFrame(refreshValues);\r\n  }, [filters]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!selected){ \r\n      setHoveredNode(\"\");\r\n      return;\r\n    }\r\n    \r\n    //alert(JSON.stringify(selected));\r\n    sigma.getGraph().setNodeAttribute(selected, \"highlighted\", true);\r\n    const nodeDisplayData = sigma.getNodeDisplayData(selected);\r\n    if(selected){\r\n      setHoveredNode(selected);\r\n    }\r\n    console.log(selected);\r\n    if (nodeDisplayData){\r\n      \r\n      \r\n      sigma.getCamera().animate(\r\n        { ...nodeDisplayData, ratio: 0.05 },\r\n        {\r\n          duration: 600,\r\n        },\r\n      );}\r\n\r\n    return () => {\r\n      sigma.getGraph().setNodeAttribute(selected, \"highlighted\", false);\r\n    };\r\n  }, [selected]);\r\n\r\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const searchString = e.target.value;\r\n    const valueItem = values.find((value) => value.label === searchString);\r\n    if (valueItem) {\r\n      setSearch(valueItem.label);\r\n      setValues([]);\r\n      \r\n      setSelected(valueItem.id);\r\n    } else {\r\n      setSelected(null);\r\n      setSearch(searchString);\r\n    \r\n    }\r\n  };\r\n\r\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    \r\n    //debugger\r\n    if (e.key === \"Enter\" && values.length) {\r\n      setSearch(values[0].label);\r\n      setSelected(values[0].id);\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"search-wrapper\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search in nodes...\"\r\n        list=\"nodes\"\r\n        value={search}\r\n        id=\"search\"\r\n        onChange={onInputChange}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <BsSearch className=\"icon\" onClick={event=>{ setSearch(\"\")}} />\r\n      <datalist id=\"nodes\">\r\n        {values.map((value: { id: string; label: string }) => (\r\n          <option key={value.id} value={value.label}>\r\n            {value.label}\r\n          </option>\r\n        ))}\r\n      </datalist>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { FiltersState } from \"../types\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\n\r\nfunction prettyPercentage(val: number): string {\r\n  return (val * 100).toFixed(1) + \"%\";\r\n}\r\n\r\nconst GraphTitle: FC<{ filters: FiltersState }> = ({ filters }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const [visibleItems, setVisibleItems] = useState<{ nodes: number; edges: number }>({ nodes: 0, edges: 0 });\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index = { nodes: 0, edges: 0 };\r\n      graph.forEachNode((_, { hidden }) => !hidden && index.nodes++);\r\n      graph.forEachEdge((_, _2, _3, _4, source, target) => !source.hidden && !target.hidden && index.edges++);\r\n      setVisibleItems(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  return (\r\n    <div className=\"graph-title\">\r\n      <h1>A cartography of Wikipedia pages around data visualization</h1>\r\n      <h2>\r\n        <i>\r\n          {graph.order} node{graph.order > 1 ? \"s\" : \"\"}{\" \"}\r\n          {visibleItems.nodes !== graph.order\r\n            ? ` (only ${prettyPercentage(visibleItems.nodes / graph.order)} visible)`\r\n            : \"\"}\r\n          , {graph.size} edge\r\n          {graph.size > 1 ? \"s\" : \"\"}{\" \"}\r\n          {visibleItems.edges !== graph.size\r\n            ? ` (only ${prettyPercentage(visibleItems.edges / graph.size)} visible)`\r\n            : \"\"}\r\n        </i>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphTitle;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { MdBusiness, MdCategory } from \"react-icons/md\";\r\n\r\nimport { FiltersState, Tag } from \"../types\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { keyBy, mapValues, sortBy, values } from \"lodash\";\r\nimport Panel from \"./Panel\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\r\n\r\nconst TagsPanel: FC<{\r\n  tags: Tag[];\r\n  filters: FiltersState;\r\n  toggleTag: (tag: string) => void;\r\n  setTags: (tags: Record<string, boolean>) => void;\r\n}> = ({ tags, filters, toggleTag, setTags }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const nodesPerTag = useMemo(() => {\r\n    const index: Record<string, number> = {};\r\n    graph.forEachNode((_, { tag }) => (index[tag] = (index[tag] || 0) + 1));\r\n    return index;\r\n  }, []);\r\n\r\n  const maxNodesPerTag = useMemo(() => Math.max(...values(nodesPerTag)), [nodesPerTag]);\r\n  const visibleTagsCount = useMemo(() => Object.keys(filters.tags).length, [filters]);\r\n\r\n  const [visibleNodesPerTag, setVisibleNodesPerTag] = useState<Record<string, number>>(nodesPerTag);\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index: Record<string, number> = {};\r\n      graph.forEachNode((_, { tag, hidden }) => !hidden && (index[tag] = (index[tag] || 0) + 1));\r\n      setVisibleNodesPerTag(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  const sortedTags = useMemo(\r\n    () => sortBy(tags, (tag) => (tag.key === \"unknown\" ? Infinity : -nodesPerTag[tag.key])),\r\n    [tags, nodesPerTag],\r\n  );\r\n\r\n  return (\r\n    <Panel\r\n      title={\r\n        <>\r\n          <MdBusiness className=\"text\" /> Companies\r\n          {visibleTagsCount < tags.length ? (\r\n            <span className=\"text-muted text-small\">\r\n              {\" \"}\r\n              ({visibleTagsCount} / {tags.length})\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      }\r\n    >\r\n      <p>\r\n        <i className=\"text-muted\">Click a company to show/hide related pages from the network.</i>\r\n      </p>\r\n      <p className=\"buttons\">\r\n        <button className=\"btn\" onClick={() => setTags(mapValues(keyBy(tags, \"key\"), () => true))}>\r\n          <AiOutlineCheckCircle /> Check all\r\n        </button>{\" \"}\r\n        <button className=\"btn\" onClick={() => setTags({})}>\r\n          <AiOutlineCloseCircle /> Uncheck all\r\n        </button>\r\n      </p>\r\n      <ul>\r\n        {sortedTags.map((tag) => {\r\n          const nodesCount = nodesPerTag[tag.key];\r\n          const visibleNodesCount = visibleNodesPerTag[tag.key] || 0;\r\n          return (\r\n            <li\r\n              className=\"caption-row\"\r\n              key={tag.key}\r\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.tags[tag.key] || false}\r\n                onChange={() => toggleTag(tag.key)}\r\n                id={`tag-${tag.key}`}\r\n              />\r\n              <label htmlFor={`tag-${tag.key}`}>\r\n                <span\r\n                  className=\"circle\"\r\n                  style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/images/${tag.image})` }}\r\n                />{\" \"}\r\n                <div className=\"node-label\">\r\n                  <span>{tag.key}</span>\r\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerTag + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </label>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default TagsPanel;\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { SigmaContainer, ZoomControl, FullScreenControl } from \"react-sigma-v2\";\r\n\r\nimport getNodeProgramImage from \"sigma/rendering/webgl/programs/node.image\";\r\nimport { omit, mapValues, keyBy, constant } from \"lodash\";\r\n\r\nimport GraphSettingsController from \"./GraphSettingsController\";\r\nimport GraphEventsController from \"./GraphEventsController\";\r\nimport GraphDataController from \"./GraphDataController\";\r\nimport NodesPanel from \"./NodesPanel\";\r\nimport { Dataset, FiltersState } from \"../types\";\r\nimport ClustersPanel from \"./ClustersPanel\";\r\nimport SearchField from \"./SearchField\";\r\nimport drawLabel from \"../canvas-utils\";\r\nimport GraphTitle from \"./GraphTitle\";\r\nimport TagsPanel from \"./TagsPanel\";\r\n\r\nimport \"react-sigma-v2/lib/react-sigma-v2.css\";\r\nimport { GrClose, GrGraphQl } from \"react-icons/gr\";\r\nimport { BiRadioCircleMarked, BiBookContent } from \"react-icons/bi\";\r\nimport { BsArrowsFullscreen, BsFullscreenExit, BsZoomIn, BsZoomOut } from \"react-icons/bs\";\r\n\r\nconst Root: FC = () => {\r\n  const [showContents, setShowContents] = useState(false);\r\n  const [dataReady, setDataReady] = useState(false);\r\n  const [dataset, setDataset] = useState<Dataset | null>(null);\r\n  const [filtersState, setFiltersState] = useState<FiltersState>({\r\n    clusters: {},\r\n    tags: {},\r\n    nodes:{}\r\n  });\r\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\r\n\r\n  // Load data on mount:\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/dataset.json`)\r\n      .then((res) => res.json())\r\n      .then((dataset: Dataset) => {\r\n        setDataset(dataset);\r\n        setFiltersState({\r\n          clusters: mapValues(keyBy(dataset.clusters, \"key\"), constant(true)),\r\n          tags: mapValues(keyBy(dataset.tags, \"key\"), constant(true)),\r\n          nodes: mapValues(keyBy(dataset.nodes, \"key\"), constant(true)),\r\n        });\r\n        requestAnimationFrame(() => setDataReady(true));\r\n      });\r\n  }, []);\r\n\r\n  if (!dataset) return null;\r\n\r\n  return (\r\n    <div id=\"app-root\" className={showContents ? \"show-contents\" : \"\"}>\r\n      <SigmaContainer\r\n        graphOptions={{ type: \"directed\" }}\r\n        initialSettings={{\r\n          nodeProgramClasses: { image: getNodeProgramImage() },\r\n          labelRenderer: drawLabel,\r\n          defaultNodeType: \"image\",\r\n          defaultEdgeType: \"arrow\",\r\n          labelDensity: 0.07,\r\n          labelGridCellSize: 60,\r\n          labelRenderedSizeThreshold: 15,\r\n          labelFont: \"Lato, sans-serif\",\r\n          zIndex: true,\r\n        }}\r\n        className=\"react-sigma\"\r\n      >\r\n        <GraphSettingsController hoveredNode={hoveredNode} />\r\n        <GraphEventsController setHoveredNode={setHoveredNode} />\r\n        <GraphDataController dataset={dataset} filters={filtersState} />\r\n\r\n        {dataReady && (\r\n          <>\r\n            <div className=\"controls\">\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"show-contents\"\r\n                  onClick={() => setShowContents(true)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <BiBookContent />\r\n                </button>\r\n              </div>\r\n              <FullScreenControl\r\n                className=\"ico\"\r\n                customEnterFullScreen={<BsArrowsFullscreen />}\r\n                customExitFullScreen={<BsFullscreenExit />}\r\n              />\r\n              <ZoomControl\r\n                className=\"ico\"\r\n                customZoomIn={<BsZoomIn />}\r\n                customZoomOut={<BsZoomOut />}\r\n                customZoomCenter={<BiRadioCircleMarked />}\r\n              />\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"\"\r\n                  onClick={() => setHoveredNode(\"\")}\r\n                  title=\"Reset Filters\"\r\n                >\r\n                  <GrGraphQl />\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"contents\">\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ico hide-contents\"\r\n                  onClick={() => setShowContents(false)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <GrClose />\r\n                </button>\r\n              </div>\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ico hide-contents\"\r\n                  onClick={() => setShowContents(false)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <GrClose />\r\n                </button>\r\n              </div>\r\n              \r\n              \r\n              <GraphTitle filters={filtersState} />\r\n              <div className=\"panels\">\r\n                <SearchField setHoveredNode={setHoveredNode} filters={filtersState} />\r\n                {/* <DescriptionPanel /> */}\r\n                {/* <NodesPanel\r\n                  nodes={dataset.nodes}\r\n                  filters={filtersState}\r\n                  setNodes={(nodes) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      nodes,\r\n                    }))\r\n                  }\r\n                  toggleNode={(node) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      nodes: filters.nodes[node] \r\n                      ? omit(filters.nodes, node) \r\n                      : { ...filters.nodes, [node]: true },\r\n                    }));\r\n                  }}\r\n                /> */}\r\n\r\n                \r\n                <ClustersPanel\r\n                  clusters={dataset.clusters}\r\n                  filters={filtersState}\r\n                  setClusters={(clusters) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      clusters,\r\n                    }))\r\n                  }\r\n                  toggleCluster={(cluster) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      clusters: filters.clusters[cluster]\r\n                        ? omit(filters.clusters, cluster)\r\n                        : { ...filters.clusters, [cluster]: true },\r\n                    }));\r\n                  }}\r\n                />\r\n                <TagsPanel\r\n                  tags={dataset.tags}\r\n                  filters={filtersState}\r\n                  setTags={(tags) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      tags,\r\n                    }))\r\n                  }\r\n                  toggleTag={(tag) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      tags: filters.tags[tag] ? omit(filters.tags, tag) : { ...filters.tags, [tag]: true },\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </SigmaContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\nimport Root from \"./views/Root\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}