{"version":3,"sources":["canvas-utils.ts","use-debounce.ts","views/GraphSettingsController.tsx","views/GraphEventsController.tsx","views/GraphDataController.tsx","views/Panel.tsx","views/ClustersPanel.tsx","views/SearchField.tsx","views/GraphTitle.tsx","views/TagsPanel.tsx","views/NodesPanel.tsx","views/Root.tsx","index.tsx"],"names":["TEXT_COLOR","drawLabel","context","data","settings","label","size","labelSize","font","labelFont","weight","labelWeight","width","measureText","fillStyle","fillRect","x","y","fillText","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","GraphSettingsController","children","hoveredNode","sigma","useSigma","graph","getGraph","debouncedHoveredNode","setSetting","subLabelSize","subLabel","tag","clusterLabel","beginPath","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","labelWidth","subLabelWidth","clusterLabelWidth","textWidth","Math","max","round","w","hLabel","hSubLabel","ctx","height","radius","moveTo","lineTo","quadraticCurveTo","closePath","drawRoundRect","fill","color","drawHover","getNodeDisplayData","key","hoveredColor","node","hasEdge","zIndex","image","highlighted","edge","hasExtremity","hidden","GraphEventsController","edges","setEdgesSelecteds","setHoveredNode","setConnections","registerEvents","useRegisterEvents","clickNode","eds","Array","forEach","toString","push","getChildrens","getNodeAttribute","connections","forEachNeighbor","neighbor","attributes","ed","getEdgeAttribute","e","GraphDataController","dataset","filters","clusters","keyBy","tags","nodes","addNode","omit","cluster","process","element","addEdge","sizeAux","scores","map","minDegree","min","maxDegree","forEachNode","setNodeAttribute","clear","Panel","title","initiallyDeployed","isDeployed","setIsDeployed","dom","useRef","current","parentElement","scrollTo","top","offsetTop","behavior","className","ref","type","onClick","v","duration","ClustersPanel","toggleCluster","setClusters","nodesPerCluster","useMemo","index","_","maxNodesPerCluster","values","visibleClustersCount","Object","keys","length","visibleNodesPerCluster","setVisibleNodesPerCluster","requestAnimationFrame","sortedClusters","sortBy","mapValues","nodesCount","visibleNodesCount","checked","onChange","id","htmlFor","style","background","borderColor","SearchField","search","setSearch","setValues","selected","setSelected","refreshValues","newValues","lcSearch","toLowerCase","indexOf","nodeDisplayData","console","log","getCamera","animate","ratio","placeholder","list","searchString","target","valueItem","find","onKeyPress","event","prettyPercentage","val","toFixed","GraphTitle","visibleItems","setVisibleItems","forEachEdge","_2","_3","_4","source","order","TagsPanel","toggleTag","setTags","nodesPerTag","maxNodesPerTag","visibleTagsCount","visibleNodesPerTag","setVisibleNodesPerTag","sortedTags","Infinity","backgroundImage","NodesPanel","currentNode","toggleNode","setNodes","nodesPerNode","maxNodesPerNode","visibleNodesPerNode","setVisibleNodesPerNode","sortedNodes","undefined","sortedConnections","filteredNeighbor","a","conn","href","URL","Root","showContents","setShowContents","dataReady","setDataReady","setDataset","filtersState","setFiltersState","fetch","then","res","json","constant","graphOptions","initialSettings","nodeProgramClasses","getNodeProgramImage","labelRenderer","defaultNodeType","defaultEdgeType","labelDensity","labelGridCellSize","labelRenderedSizeThreshold","customEnterFullScreen","customExitFullScreen","customZoomIn","customZoomOut","customZoomCenter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96c33907.chunk.js","sourcesContent":["import { NodeDisplayData, PartialButFor, PlainObject } from \"sigma/types\";\r\nimport { Settings } from \"sigma/settings\";\r\n\r\nconst TEXT_COLOR = \"#000000\";\r\n\r\n/**\r\n * This function draw in the input canvas 2D context a rectangle.\r\n * It only deals with tracing the path, and does not fill or stroke.\r\n */\r\nexport function drawRoundRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  radius: number,\r\n): void {\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + radius, y);\r\n  ctx.lineTo(x + width - radius, y);\r\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n  ctx.lineTo(x + width, y + height - radius);\r\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n  ctx.lineTo(x + radius, y + height);\r\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n  ctx.lineTo(x, y + radius);\r\n  ctx.quadraticCurveTo(x, y, x + radius, y);\r\n  ctx.closePath();\r\n}\r\n\r\n/**\r\n * Custom hover renderer\r\n */\r\nexport function drawHover(context: CanvasRenderingContext2D, data: PlainObject, settings: PlainObject) {\r\n  const size = settings.labelSize;\r\n  const font = settings.labelFont;\r\n  const weight = settings.labelWeight;\r\n  const subLabelSize = size - 2;\r\n\r\n  const label = data.label;\r\n  const subLabel = data.tag !== \"unknown\" ? data.tag : \"\";\r\n  const clusterLabel = data.clusterLabel;\r\n\r\n  // Then we draw the label background\r\n  context.beginPath();\r\n  context.fillStyle = \"#fff\";\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 2;\r\n  context.shadowBlur = 8;\r\n  context.shadowColor = \"#000\";\r\n\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  const labelWidth = context.measureText(label).width;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  const subLabelWidth = subLabel ? context.measureText(subLabel).width : 0;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  const clusterLabelWidth = clusterLabel ? context.measureText(clusterLabel).width : 0;\r\n\r\n  const textWidth = Math.max(labelWidth, subLabelWidth, clusterLabelWidth);\r\n\r\n  const x = Math.round(data.x);\r\n  const y = Math.round(data.y);\r\n  const w = Math.round(textWidth + size / 2 + data.size + 3);\r\n  const hLabel = Math.round(size / 2 + 4);\r\n  const hSubLabel = subLabel ? Math.round(subLabelSize / 2 + 9) : 0;\r\n  const hClusterLabel = Math.round(subLabelSize / 2 + 9);\r\n\r\n  drawRoundRect(context, x, y - hSubLabel - 12, w, hClusterLabel + hLabel + hSubLabel + 12, 5);\r\n  context.closePath();\r\n  context.fill();\r\n\r\n  context.shadowOffsetX = 0;\r\n  context.shadowOffsetY = 0;\r\n  context.shadowBlur = 0;\r\n\r\n  // And finally we draw the labels\r\n  context.fillStyle = TEXT_COLOR;\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  context.fillText(label, data.x + data.size + 3, data.y + size / 3);\r\n\r\n  if (subLabel) {\r\n    context.fillStyle = TEXT_COLOR;\r\n    context.font = `${weight} ${subLabelSize}px ${font}`;\r\n    context.fillText(subLabel, data.x + data.size + 3, data.y - (2 * size) / 3 - 2);\r\n  }\r\n\r\n  context.fillStyle = data.color;\r\n  context.font = `${weight} ${subLabelSize}px ${font}`;\r\n  context.fillText(clusterLabel, data.x + data.size + 3, data.y + size / 3 + 3 + subLabelSize);\r\n}\r\n\r\n/**\r\n * Custom label renderer\r\n */\r\nexport default function drawLabel(\r\n  context: CanvasRenderingContext2D,\r\n  data: PartialButFor<NodeDisplayData, \"x\" | \"y\" | \"size\" | \"label\" | \"color\">,\r\n  settings: Settings,\r\n): void {\r\n  if (!data.label) return;\r\n\r\n  const size = settings.labelSize,\r\n    font = settings.labelFont,\r\n    weight = settings.labelWeight;\r\n\r\n  context.font = `${weight} ${size}px ${font}`;\r\n  const width = context.measureText(data.label).width + 8;\r\n\r\n  context.fillStyle = \"#ffffffcc\";\r\n  context.fillRect(data.x + data.size, data.y + size / 3 - 15, width, 20);\r\n\r\n  context.fillStyle = \"#000\";\r\n  context.fillText(data.label, data.x + data.size + 3, data.y + size / 3);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction useDebounce<T>(value: T, delay: number): T {\r\n  // State and setters for debounced value\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Update debounced value after delay\r\n      const handler = setTimeout(() => {\r\n        if (value !== debouncedValue) setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      // Cancel the timeout if value changes (also on delay change or unmount)\r\n      // This is how we prevent debounced value from updating if value is changed ...\r\n      // .. within the delay period. Timeout gets cleared and restarted.\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    [value, delay], // Only re-call effect if value or delay changes\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;\r\n","import { useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\n\r\nimport { drawHover } from \"../canvas-utils\";\r\nimport useDebounce from \"../use-debounce\";\r\n\r\nconst NODE_FADE_COLOR = \"#ccc\";\r\nconst EDGE_FADE_COLOR = \"#eee\";\r\n\r\nconst GraphSettingsController: FC<{ hoveredNode: string | null }> = ({ children, hoveredNode }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  // Here we debounce the value to avoid having too much highlights refresh when\r\n  // moving the mouse over the graph:\r\n  const debouncedHoveredNode = useDebounce(hoveredNode, 40);\r\n\r\n  /**\r\n   * Initialize here settings that require to know the graph and/or the sigma\r\n   * instance:\r\n   */\r\n  useEffect(() => {\r\n    sigma.setSetting(\"hoverRenderer\", (context, data, settings) =>\r\n      drawHover(context, { ...sigma.getNodeDisplayData(data.key), ...data }, settings),\r\n    );\r\n  }, [sigma, graph]);\r\n\r\n  /**\r\n   * Update node and edge reducers when a node is hovered, to highlight its\r\n   * neighborhood:\r\n   */\r\n  useEffect(() => {\r\n    const hoveredColor: string = debouncedHoveredNode ? sigma.getNodeDisplayData(debouncedHoveredNode)!.color : \"\";\r\n\r\n    sigma.setSetting(\r\n      \"nodeReducer\",\r\n      debouncedHoveredNode\r\n        ? (node, data) =>\r\n            node === debouncedHoveredNode ||\r\n            graph.hasEdge(node, debouncedHoveredNode) ||\r\n            graph.hasEdge(debouncedHoveredNode, node)\r\n              ? { ...data, zIndex: 1 }\r\n              : { ...data, zIndex: 0, \r\n                /*label: \"\",*/\r\n                 color: NODE_FADE_COLOR, image: null, highlighted: false }\r\n        : null,\r\n    );\r\n    sigma.setSetting(\r\n      \"edgeReducer\",\r\n      debouncedHoveredNode\r\n        ? (edge, data) =>\r\n            graph.hasExtremity(edge, debouncedHoveredNode)\r\n              ? { ...data, color: hoveredColor, size: 4 }\r\n              : { ...data, color: EDGE_FADE_COLOR, hidden: true }\r\n        : null,\r\n    );\r\n  }, [debouncedHoveredNode]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphSettingsController;\r\n","import { useRegisterEvents, useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { CameraState } from \"sigma/types\";\r\nimport { Child, Edge, NodeData } from \"../types\";\r\nimport { Attributes } from \"graphology-types\";\r\n\r\nfunction getMouseLayer() {\r\n  return document.querySelector(\".sigma-mouse\");\r\n}\r\n\r\nconst GraphEventsController: FC<{ edges: Edge[];\r\n  setEdgesSelecteds:(edges: Array<Edge>) => void;\r\n  setHoveredNode: (node: string | null) => void;\r\n  setConnections: (connections: Array<Attributes>) => void;\r\n  \r\n}> = ({edges, setEdgesSelecteds, setHoveredNode, setConnections, children }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n  const registerEvents = useRegisterEvents();\r\n  \r\n  const getChildrens = (hoveredNode: string | null, edges: Edge[]) => {\r\n    var eds = Array<Edge>();\r\n    edges.forEach(edge =>{ \r\n      if(edge.edge[0].toString() === hoveredNode){\r\n        debugger\r\n        eds.push(edge);\r\n      }\r\n  });\r\n    return eds;\r\n  }\r\n\r\n  /**\r\n   * Initialize here settings that require to know the graph and/or the sigma\r\n   * instance:\r\n   */\r\n  useEffect(() => {\r\n    registerEvents({\r\n      clickNode({ node }) {\r\n        setHoveredNode(node);\r\n        setEdgesSelecteds(getChildrens(node, edges));\r\n        if (!graph.getNodeAttribute(node, \"hidden\")) {   \r\n          //window.open(graph.getNodeAttribute(node, \"URL\"), \"_blank\");\r\n        }\r\n        let connections= Array<Attributes>();\r\n        graph.forEachNeighbor(node, function(neighbor, attributes) {\r\n          let ed;\r\n          try{\r\n              ed = graph.getEdgeAttribute(node,attributes[\"key\"] , 'sizeAux');\r\n          } catch(e){\r\n              ed  = graph.getEdgeAttribute(attributes[\"key\"] ,node, 'sizeAux');\r\n          }\r\n          attributes[\"size\"] = ed;\r\n          connections.push(attributes);\r\n        });\r\n        setConnections(connections);\r\n        \r\n      },\r\n      // enterNode({ node }) {\r\n      //   setHoveredNode(node);\r\n      //   // TODO: Find a better way to get the DOM mouse layer:\r\n      //   const mouseLayer = getMouseLayer();\r\n      //   if (mouseLayer) mouseLayer.classList.add(\"mouse-pointer\");\r\n      // },\r\n      // leaveNode() {\r\n      //   //setHoveredNode(null);\r\n      //   // TODO: Find a better way to get the DOM mouse layer:\r\n      //   const mouseLayer = getMouseLayer();\r\n      //   if (mouseLayer) mouseLayer.classList.remove(\"mouse-pointer\");\r\n      // },\r\n     \r\n    });\r\n  }, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphEventsController;\r\n","import { useSigma } from \"react-sigma-v2\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { keyBy, omit } from \"lodash\";\r\n\r\nimport { Dataset, FiltersState } from \"../types\";\r\n\r\nconst GraphDataController: FC<{ dataset: Dataset; filters: FiltersState }> = ({ dataset, filters, children }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  /**\r\n   * Feed graphology with the new dataset:\r\n   */\r\n  useEffect(() => {\r\n    if (!graph || !dataset) return;\r\n\r\n    const clusters = keyBy(dataset.clusters, \"key\");\r\n    const tags = keyBy(dataset.tags, \"key\");\r\n    const nodes = keyBy(dataset.nodes, \"key\");\r\n    dataset.nodes.forEach((node) =>\r\n      graph.addNode(node.key, {\r\n        ...node,\r\n        ...omit(clusters[node.cluster], \"key\"),\r\n        image: `${process.env.PUBLIC_URL}/images/${tags[node.tag].image}`,\r\n      }),\r\n    );\r\n     dataset.edges.forEach((element) => {\r\n      var ed = element.edge as Array<any>;\r\n      graph.addEdge(ed[0], ed[1],{ size: 0.5, sizeAux: element.size });\r\n     });\r\n\r\n    // Use degrees as node sizes:\r\n    const scores = graph.nodes().map((node) => graph.getNodeAttribute(node, \"score\"));\r\n    const minDegree = Math.min(...scores);\r\n    const maxDegree = Math.max(...scores);\r\n    const MIN_NODE_SIZE = 3;\r\n    const MAX_NODE_SIZE = 30;\r\n    graph.forEachNode((node) =>\r\n      graph.setNodeAttribute(\r\n        node,\r\n        \"size\",\r\n        ((graph.getNodeAttribute(node, \"score\") - minDegree) / (maxDegree - minDegree)) *\r\n          (MAX_NODE_SIZE - MIN_NODE_SIZE) +\r\n          MIN_NODE_SIZE,\r\n      ),\r\n    );\r\n\r\n    return () => graph.clear();\r\n  }, [graph, dataset]);\r\n\r\n  /**\r\n   * Apply filters to graphology:\r\n   */\r\n  useEffect(() => {\r\n    const { clusters, tags, nodes } = filters;\r\n  \r\n    graph.forEachNode((node, { cluster, tag, key }) => {\r\n      graph.setNodeAttribute(node, \"hidden\", !clusters[cluster] || !tags[tag] || !nodes[key]);\r\n    });\r\n  }, [graph, filters]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default GraphDataController;\r\n","import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\r\nimport AnimateHeight from \"react-animate-height\";\r\n\r\nconst DURATION = 300;\r\n\r\nconst Panel: FC<{ title: JSX.Element | string; initiallyDeployed?: boolean }> = ({\r\n  title,\r\n  initiallyDeployed,\r\n  children,\r\n}) => {\r\n  const [isDeployed, setIsDeployed] = useState(initiallyDeployed || false);\r\n  const dom = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isDeployed)\r\n      setTimeout(() => {\r\n        if (dom.current) dom.current.parentElement!.scrollTo({ top: dom.current.offsetTop - 5, behavior: \"smooth\" });\r\n      }, DURATION);\r\n  }, [isDeployed]);\r\n\r\n  return (\r\n    <div className=\"panel\" ref={dom}>\r\n      <h2>\r\n        {title}{\" \"}\r\n        <button type=\"button\" onClick={() => setIsDeployed((v) => !v)}>\r\n          {isDeployed ? <MdExpandLess /> : <MdExpandMore />}\r\n        </button>\r\n      </h2>\r\n      <AnimateHeight duration={DURATION} height={isDeployed ? \"auto\" : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { sortBy, values, keyBy, mapValues } from \"lodash\";\r\n\r\nimport { Cluster, FiltersState } from \"../types\";\r\nimport { MdGroupWork } from \"react-icons/md\";\r\nimport Panel from \"./Panel\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\r\n\r\nconst ClustersPanel: FC<{\r\n  clusters: Cluster[];\r\n  filters: FiltersState;\r\n  toggleCluster: (cluster: string) => void;\r\n  setClusters: (clusters: Record<string, boolean>) => void;\r\n}> = ({ clusters, filters, toggleCluster, setClusters }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const nodesPerCluster = useMemo(() => {\r\n    const index: Record<string, number> = {};\r\n    graph.forEachNode((_, { cluster }) => (index[cluster] = (index[cluster] || 0) + 1));\r\n    return index;\r\n  }, []);\r\n\r\n  const maxNodesPerCluster = useMemo(() => Math.max(...values(nodesPerCluster)), [nodesPerCluster]);\r\n  const visibleClustersCount = useMemo(() => Object.keys(filters.clusters).length, [filters]);\r\n\r\n  const [visibleNodesPerCluster, setVisibleNodesPerCluster] = useState<Record<string, number>>(nodesPerCluster);\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index: Record<string, number> = {};\r\n      graph.forEachNode((_, { cluster, hidden }) => !hidden && (index[cluster] = (index[cluster] || 0) + 1));\r\n      setVisibleNodesPerCluster(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  const sortedClusters = useMemo(\r\n    () => sortBy(clusters, (cluster) => -nodesPerCluster[cluster.key]),\r\n    [clusters, nodesPerCluster],\r\n  );\r\n\r\n  return (\r\n    <Panel\r\n      title={\r\n        <>\r\n          <MdGroupWork className=\"text-muted\" /> Clusters\r\n          {visibleClustersCount < clusters.length ? (\r\n            <span className=\"text-muted text-small\">\r\n              {\" \"}\r\n              ({visibleClustersCount} / {clusters.length})\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      }\r\n    >\r\n      <p>\r\n        <i className=\"text-muted\">Click a cluster to show/hide related pages from the network.</i>\r\n      </p>\r\n      <p className=\"buttons\">\r\n        <button className=\"btn\" onClick={() => setClusters(mapValues(keyBy(clusters, \"key\"), () => true))}>\r\n          <AiOutlineCheckCircle /> Check all\r\n        </button>{\" \"}\r\n        <button className=\"btn\" onClick={() => setClusters({})}>\r\n          <AiOutlineCloseCircle /> Uncheck all\r\n        </button>\r\n      </p>\r\n      <ul>\r\n        {sortedClusters.map((cluster) => {\r\n          const nodesCount = nodesPerCluster[cluster.key];\r\n          const visibleNodesCount = visibleNodesPerCluster[cluster.key] || 0;\r\n          return (\r\n            <li\r\n              className=\"caption-row\"\r\n              key={cluster.key}\r\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.clusters[cluster.key] || false}\r\n                onChange={() => toggleCluster(cluster.key)}\r\n                id={`cluster-${cluster.key}`}\r\n              />\r\n              <label htmlFor={`cluster-${cluster.key}`}>\r\n                <span className=\"circle\" style={{ background: cluster.color, borderColor: cluster.color }} />{\" \"}\r\n                <div className=\"node-label\">\r\n                  <span>{cluster.clusterLabel}</span>\r\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerCluster + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </label>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default ClustersPanel;\r\n","import React, { KeyboardEvent, ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { Attributes } from \"graphology-types\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nimport { FiltersState } from \"../types\";\r\n\r\n/**\r\n * This component is basically a fork from React-sigma-v2's SearchControl\r\n * component, to get some minor adjustments:\r\n * 1. We need to hide hidden nodes from results\r\n * 2. We need custom markup\r\n */\r\nconst SearchField: FC<{ \r\n  setHoveredNode: (node: string | null) => void;\r\n  setConnections: (connections: Array<Attributes>) => void;\r\n  filters: FiltersState }> = ({ setHoveredNode, setConnections ,filters }) => {\r\n  const sigma = useSigma();\r\n\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [values, setValues] = useState<Array<{ id: string; label: string }>>([]);\r\n  const [selected, setSelected] = useState<string | null>(null);\r\n\r\n  \r\n  const refreshValues = () => {\r\n    const newValues: Array<{ id: string; label: string }> = [];\r\n    const lcSearch = search.toLowerCase();\r\n    if (!selected && search.length > 3) {\r\n      sigma.getGraph().forEachNode((key: string, attributes: Attributes): void => {\r\n        if(attributes.hidden){\r\n          attributes.color = \"#ccc\";\r\n        }\r\n        if (!attributes.hidden && attributes.label && attributes.label.toLowerCase().indexOf(lcSearch) === 0){\r\n           if(newValues.length <100) newValues.push({ id: key, label: attributes.label });\r\n          \r\n          }\r\n       });\r\n    }\r\n    \r\n    setValues(newValues);\r\n  };\r\n\r\n  // Refresh values when search is updated:\r\n  useEffect(() => refreshValues(), [search]);\r\n\r\n  // Refresh values when filters are updated (but wait a frame first):\r\n  useEffect(() => {\r\n    requestAnimationFrame(refreshValues);\r\n  }, [filters]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!selected){ \r\n      setHoveredNode(\"\");\r\n      return;\r\n    }\r\n    \r\n    //alert(JSON.stringify(selected));\r\n    sigma.getGraph().setNodeAttribute(selected, \"highlighted\", true);\r\n    const nodeDisplayData = sigma.getNodeDisplayData(selected);\r\n    if(selected){\r\n      setHoveredNode(selected);\r\n      let connections= Array<Attributes>();\r\n          sigma.getGraph().forEachNeighbor(selected, function(neighbor, attributes) {\r\n          let ed;\r\n          try{\r\n              ed = sigma.getGraph().getEdgeAttribute(selected,attributes[\"key\"] , 'sizeAux');\r\n          } catch(e){\r\n              ed  = sigma.getGraph().getEdgeAttribute(attributes[\"key\"] ,selected, 'sizeAux');\r\n          }\r\n          attributes[\"size\"] = ed;\r\n          connections.push(attributes);\r\n        });\r\n        setConnections(connections);\r\n    }\r\n    console.log(selected);\r\n    if (nodeDisplayData){\r\n      \r\n      sigma.getCamera().animate(\r\n        { ...nodeDisplayData, ratio: 0.05 },\r\n        {\r\n          duration: 600,\r\n        },\r\n      );}\r\n\r\n    return () => {\r\n      sigma.getGraph().setNodeAttribute(selected, \"highlighted\", false);\r\n    };\r\n  }, [selected]);\r\n\r\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const searchString = e.target.value;\r\n    const valueItem = values.find((value) => value.label === searchString);\r\n    if (valueItem) {\r\n      setSearch(valueItem.label);\r\n      setValues([]);\r\n      \r\n      setSelected(valueItem.id);\r\n    } else {\r\n      setSelected(null);\r\n      setSearch(searchString);\r\n    \r\n    }\r\n  };\r\n\r\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    \r\n    //debugger\r\n    if (e.key === \"Enter\" && values.length) {\r\n      setSearch(values[0].label);\r\n      setSelected(values[0].id);\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"search-wrapper\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search in nodes...\"\r\n        list=\"nodes\"\r\n        value={search}\r\n        id=\"search\"\r\n        onChange={onInputChange}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <BsSearch className=\"icon\" onClick={event=>{ setSearch(\"\")}} />\r\n      <datalist id=\"nodes\">\r\n        {values.map((value: { id: string; label: string }) => (\r\n          <option key={value.id} value={value.label}>\r\n            {value.label}\r\n          </option>\r\n        ))}\r\n      </datalist>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { FiltersState } from \"../types\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\n\r\nfunction prettyPercentage(val: number): string {\r\n  return (val * 100).toFixed(1) + \"%\";\r\n}\r\n\r\nconst GraphTitle: FC<{ filters: FiltersState }> = ({ filters }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const [visibleItems, setVisibleItems] = useState<{ nodes: number; edges: number }>({ nodes: 0, edges: 0 });\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index = { nodes: 0, edges: 0 };\r\n      graph.forEachNode((_, { hidden }) => !hidden && index.nodes++);\r\n      graph.forEachEdge((_, _2, _3, _4, source, target) => !source.hidden && !target.hidden && index.edges++);\r\n      setVisibleItems(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  return (\r\n    <div className=\"graph-title\">\r\n      <h1>A cartography of Wikipedia pages around data visualization</h1>\r\n      <h2>\r\n        <i>\r\n          {graph.order} node{graph.order > 1 ? \"s\" : \"\"}{\" \"}\r\n          {visibleItems.nodes !== graph.order\r\n            ? ` (only ${prettyPercentage(visibleItems.nodes / graph.order)} visible)`\r\n            : \"\"}\r\n          , {graph.size} edge\r\n          {graph.size > 1 ? \"s\" : \"\"}{\" \"}\r\n          {visibleItems.edges !== graph.size\r\n            ? ` (only ${prettyPercentage(visibleItems.edges / graph.size)} visible)`\r\n            : \"\"}\r\n        </i>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphTitle;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { MdBusiness } from \"react-icons/md\";\r\n\r\nimport { FiltersState, Tag } from \"../types\";\r\nimport { useSigma } from \"react-sigma-v2\";\r\nimport { keyBy, mapValues, sortBy, values } from \"lodash\";\r\nimport Panel from \"./Panel\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\r\n\r\nconst TagsPanel: FC<{\r\n  tags: Tag[];\r\n  filters: FiltersState;\r\n  toggleTag: (tag: string) => void;\r\n  setTags: (tags: Record<string, boolean>) => void;\r\n}> = ({ tags, filters, toggleTag, setTags }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n\r\n  const nodesPerTag = useMemo(() => {\r\n    const index: Record<string, number> = {};\r\n    graph.forEachNode((_, { tag }) => {\r\n      (index[tag] = (index[tag] || 0) + 1)});\r\n    return index;\r\n  }, []);\r\n\r\n  const maxNodesPerTag = useMemo(() => Math.max(...values(nodesPerTag)), [nodesPerTag]);\r\n  const visibleTagsCount = useMemo(() => Object.keys(filters.tags).length, [filters]);\r\n\r\n  const [visibleNodesPerTag, setVisibleNodesPerTag] = useState<Record<string, number>>(nodesPerTag);\r\n  \r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index: Record<string, number> = {};\r\n      graph.forEachNode((_, { tag, hidden }) => {\r\n        // console.log(tag);\r\n        // console.log(tag);\r\n        \r\n        !hidden && (index[tag] = (index[tag] || 0) + 1);\r\n      });\r\n      setVisibleNodesPerTag(index);\r\n    });\r\n  }, [filters]);\r\n\r\n  const sortedTags = useMemo(\r\n    () => sortBy(tags, (tag) => (tag.key === \"unknown\" ? Infinity : -nodesPerTag[tag.key])),\r\n    [tags, nodesPerTag],\r\n  );\r\n\r\n  return (\r\n    <Panel\r\n      title={\r\n        <>\r\n          <MdBusiness className=\"text\" /> Companies\r\n          {visibleTagsCount < tags.length ? (\r\n            <span className=\"text-muted text-small\">\r\n              {\" \"}\r\n              ({visibleTagsCount} / {tags.length})\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      }\r\n    >\r\n      <p>\r\n        <i className=\"text-muted\">Click a company to show/hide related pages from the network.</i>\r\n      </p>\r\n      <p className=\"buttons\">\r\n        <button className=\"btn\" onClick={() => setTags(mapValues(keyBy(tags, \"key\"), () => true))}>\r\n          <AiOutlineCheckCircle /> Check all\r\n        </button>{\" \"}\r\n        <button className=\"btn\" onClick={() => setTags({})}>\r\n          <AiOutlineCloseCircle /> Uncheck all\r\n        </button>\r\n      </p>\r\n      <ul>\r\n        {sortedTags.map((tag) => {\r\n          const nodesCount = nodesPerTag[tag.key];\r\n          const visibleNodesCount = visibleNodesPerTag[tag.key] || 0;\r\n          return (\r\n            <li\r\n              className=\"caption-row\"\r\n              key={tag.key}\r\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.tags[tag.key] || false}\r\n                onChange={() => toggleTag(tag.key)}\r\n                id={`tag-${tag.key}`}\r\n              />\r\n              <label htmlFor={`tag-${tag.key}`}>\r\n                <span\r\n                  className=\"circle\"\r\n                  style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/images/${tag.image})` }}\r\n                />{\" \"}\r\n                <div className=\"node-label\">\r\n                  <span>{tag.key}</span>\r\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerTag + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </label>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default TagsPanel;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { MdBusiness } from \"react-icons/md\";\r\n\r\nimport { Edge, FiltersState, NodeData } from \"../types\";\r\nimport { useRegisterEvents, useSigma } from \"react-sigma-v2\";\r\nimport { keyBy, mapValues, sortBy, values } from \"lodash\";\r\nimport Panel from \"./Panel\";\r\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\r\nimport { Attributes } from \"graphology-types\";\r\n\r\nconst NodesPanel: FC<{\r\n  currentNode:any;\r\n  connections: Array<Attributes>;\r\n  nodes: NodeData[];\r\n  filters: FiltersState;\r\n  setHoveredNode: (node: string | null) => void;\r\n  toggleNode: (node: number) => void;\r\n  setNodes: (nodes: Record<number, boolean>) => void;\r\n  setConnections: (connections: Array<Attributes>) => void;\r\n}> = ({ currentNode, nodes, connections, filters, setHoveredNode, toggleNode, setNodes, setConnections }) => {\r\n  const sigma = useSigma();\r\n  const graph = sigma.getGraph();\r\n  const registerEvents = useRegisterEvents();\r\n  \r\n  const nodesPerNode = useMemo(() => {\r\n    const index: Record<string, number> = {};\r\n\r\n    graph.forEachNode((_, { key }) => {\r\n      (index[key] = (index[key] || 0) + 1);\r\n    });\r\n    return index;\r\n  }, []);\r\n\r\n  \r\n  const maxNodesPerNode = useMemo(() => Math.max(...values(nodesPerNode)), [nodesPerNode]);\r\n  const visibleNodesCount = useMemo(() => Object.keys(filters.nodes).length, [filters]);\r\n\r\n  const [visibleNodesPerNode, setVisibleNodesPerNode] = useState<Record<number, number>>(nodesPerNode);\r\n\r\n  useEffect(() => {\r\n    // To ensure the graphology instance has up to data \"hidden\" values for\r\n    // nodes, we wait for next frame before reindexing. This won't matter in the\r\n    // UX, because of the visible nodes bar width transition.\r\n    requestAnimationFrame(() => {\r\n      const index: Record<number, number> = {};\r\n      \r\n      graph.forEachNode((_, { key, hidden }) => {\r\n          !hidden && (index[key] = (index[key] || 0) + 1);  \r\n      \r\n      });\r\n      setVisibleNodesPerNode(index);\r\n     \r\n      \r\n    });\r\n    \r\n    \r\n  }, [filters]);\r\n\r\n  const sortedNodes = useMemo(\r\n    () => sortBy(nodes, (node) => (node.key === undefined ? Infinity : -nodesPerNode[node.key])),\r\n    [nodes, nodesPerNode],\r\n  );\r\n  const sortedConnections = useMemo(\r\n    () => sortBy(connections,function(node) {return -node.size}  ),\r\n    [connections],\r\n  );\r\n\r\n  const filteredNeighbor = async (node) => {\r\n    \r\n    if(node !== undefined && node !== null && node !== '') {\r\n      var conn= Array<Attributes>();\r\n      setConnections([]);\r\n      if(graph !== null){\r\n        graph.forEachNeighbor(node, function(neighbor, attributes) {\r\n          let ed;\r\n          try{\r\n              ed = graph.getEdgeAttribute(node,attributes[\"key\"] , 'sizeAux');\r\n          } catch(e){\r\n              ed  = graph.getEdgeAttribute(attributes[\"key\"] ,node, 'sizeAux');\r\n          }\r\n          attributes[\"size\"] = ed;\r\n          conn.push(attributes);\r\n          console.log(attributes);\r\n        });\r\n       \r\n      }\r\n      setConnections(conn);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Panel\r\n      title={\r\n        <>\r\n          <MdBusiness className=\"text\" /> Connections\r\n          {visibleNodesCount < nodes.length ? (\r\n            <span className=\"text-muted text-small\">\r\n              {\" \"}\r\n              ({visibleNodesCount} / {nodes.length})\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      }\r\n    >\r\n      {/* <p>\r\n        <i className=\"text-muted\">Click a company to show/hide related pages from the network.</i>\r\n      </p>\r\n      <p className=\"buttons\">\r\n        <button className=\"btn\" onClick={() => setNodes(mapValues(keyBy(nodes, \"edge\"), () => true))}>\r\n          <AiOutlineCheckCircle /> Check all\r\n        </button>{\" \"}\r\n        <button className=\"btn\" onClick={() => setNodes({})}>\r\n          <AiOutlineCloseCircle /> Uncheck all\r\n        </button>\r\n      </p>\r\n      <p>Nó atual: {currentNode}</p>\r\n       */}\r\n      <ul>\r\n        {sortedNodes.map((node) => {\r\n          if(currentNode !== undefined && currentNode !== null && currentNode > 0 && currentNode == node.key){\r\n            const nodesCount = nodesPerNode[node.key];\r\n            const visibleNodesCount = visibleNodesPerNode[node.key] || 0;\r\n             \r\n            \r\n            return (\r\n            <li\r\n              className=\"caption-row card\"\r\n              key={node.key}\r\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.nodes[node.key] || false}\r\n                onChange={()=> {toggleNode(node.key);\r\n                  setHoveredNode(node.key.toString());}}\r\n                id={`node-${node.key}`}\r\n              />\r\n              <label htmlFor={`node-${node.key}`}>\r\n                {/* <span\r\n                  className=\"circle\"\r\n                  style={{ background: \"#333\" }}\r\n                />{\" \"} */}\r\n                <div className=\"node-label\"  >\r\n                  <span>{node.label}</span>\r\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerNode + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </label>\r\n              <p><a href={node.URL} target=\"_blank\" className=\"linkedin\">Linkedin</a></p>\r\n              <p><b>Company: </b> {node.tag}</p>\r\n              <p><b>Office: </b> {node.cluster}</p>\r\n              \r\n            </li>\r\n          );\r\n          } else{\r\n            return null;\r\n          }\r\n          \r\n          \r\n        })}\r\n      </ul>\r\n      <p>Linked connections</p>\r\n      <ul>\r\n        {sortedConnections.map((node) =>{\r\n          return (\r\n            <li\r\n              className=\"caption-row\"\r\n              key={node.key}\r\n              title={`${sortedConnections.length} page${sortedConnections.length > 1 ? \"s\" : \"\"}${\r\n                visibleNodesCount !== sortedConnections.length ? ` (only ${visibleNodesCount} visible)` : \"\"\r\n              }`}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filters.nodes[node.key] || false}\r\n                onChange={() => {toggleNode(node.key); \r\n                  /*setHoveredNode(node.key.toString());*/}}\r\n                id={`node-${node.key}`}\r\n              />\r\n              <div id={`node-${node.key}`} >\r\n                {/* <label htmlFor={`node-${node.key}`}><span\r\n                  className=\"circle\"\r\n                  style={{ background: \"#333\" }}\r\n                />{\" \"}\r\n                </label> */}\r\n                <div className=\"node-label link\" onClick={()=> {setHoveredNode(node.key.toString()); \r\n                      filteredNeighbor(node.key);\r\n                }}>\r\n                  <span>{node.label} </span>\r\n                  <div className=\"bar\" style={{ width: (100 * connections.length) / maxNodesPerNode + \"%\" }}>\r\n                    <div\r\n                      className=\"inside-bar\"\r\n                      style={{\r\n                        width: (100 * visibleNodesCount) / connections.length + \"%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      \r\n      </ul>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default NodesPanel;\r\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { SigmaContainer, ZoomControl, FullScreenControl } from \"react-sigma-v2\";\r\n\r\nimport getNodeProgramImage from \"sigma/rendering/webgl/programs/node.image\";\r\nimport { omit, mapValues, keyBy, constant } from \"lodash\";\r\n\r\nimport GraphSettingsController from \"./GraphSettingsController\";\r\nimport GraphEventsController from \"./GraphEventsController\";\r\nimport GraphDataController from \"./GraphDataController\";\r\nimport {  Dataset, Edge, FiltersState } from \"../types\";\r\nimport ClustersPanel from \"./ClustersPanel\";\r\nimport SearchField from \"./SearchField\";\r\nimport drawLabel from \"../canvas-utils\";\r\nimport GraphTitle from \"./GraphTitle\";\r\nimport TagsPanel from \"./TagsPanel\";\r\nimport \"react-sigma-v2/lib/react-sigma-v2.css\";\r\nimport { GrClose, GrGraphQl } from \"react-icons/gr\";\r\nimport { BiRadioCircleMarked, BiBookContent } from \"react-icons/bi\";\r\nimport { BsArrowsFullscreen, BsFullscreenExit, BsZoomIn, BsZoomOut } from \"react-icons/bs\";\r\nimport NodesPanel from \"./NodesPanel\";\r\nimport { Attributes } from \"graphology-types\";\r\n\r\nconst Root: FC = () => {\r\n  const [showContents, setShowContents] = useState(false);\r\n  const [dataReady, setDataReady] = useState(false);\r\n  const [dataset, setDataset] = useState<Dataset | null>(null);\r\n  const [edgesSelecteds, setEdgesSelecteds] = useState<Array<Edge>>([]);\r\n  const [filtersState, setFiltersState] = useState<FiltersState>({\r\n    clusters: {},\r\n    tags: {},\r\n    nodes:{},\r\n    edges: {}\r\n  });\r\n  const [connections, setConnections] = useState<Array<Attributes>>([]);\r\n  \r\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\r\n \r\n  \r\n  // Load data on mount:\r\n  useEffect(() => {\r\n    \r\n    fetch(`${process.env.PUBLIC_URL}/dataset.json`)\r\n      .then((res) => res.json())\r\n      .then((dataset: Dataset) => {\r\n        setDataset(dataset);\r\n        setFiltersState({\r\n          clusters: mapValues(keyBy(dataset.clusters, \"key\"), constant(true)),\r\n          tags: mapValues(keyBy(dataset.tags, \"key\"), constant(true)),\r\n          nodes: mapValues(keyBy(dataset.nodes, \"key\"), constant(true)),\r\n          edges: mapValues(keyBy(dataset.edges, \"edge\"), constant(true)),\r\n        });\r\n        requestAnimationFrame(() => setDataReady(true));\r\n      });\r\n      \r\n  }, []);\r\n\r\n  \r\n  if (!dataset) return null;\r\n\r\n  return (\r\n    <div id=\"app-root\" className={showContents ? \"show-contents\" : \"\"}>\r\n      <SigmaContainer\r\n        graphOptions={{ type: \"directed\" }}\r\n        initialSettings={{\r\n          nodeProgramClasses: { image: getNodeProgramImage() },\r\n          labelRenderer: drawLabel,\r\n          defaultNodeType: \"image\",\r\n          defaultEdgeType: \"arrow\",\r\n          labelDensity: 0.07,\r\n          labelGridCellSize: 60,\r\n          labelRenderedSizeThreshold: 15,\r\n          labelFont: \"Lato, sans-serif\",\r\n          zIndex: true,\r\n        }}\r\n        className=\"react-sigma\"\r\n      >\r\n        <GraphSettingsController hoveredNode={hoveredNode}  />\r\n        <GraphEventsController \r\n          setHoveredNode={setHoveredNode} \r\n          edges={dataset.edges}\r\n          setEdgesSelecteds={setEdgesSelecteds}\r\n          setConnections={setConnections}\r\n        />\r\n        <GraphDataController dataset={dataset} filters={filtersState} />\r\n\r\n        {dataReady && (\r\n          <>\r\n            <div className=\"controls\">\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"show-contents\"\r\n                  onClick={() => setShowContents(true)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <BiBookContent />\r\n                </button>\r\n              </div>\r\n              <FullScreenControl\r\n                className=\"ico\"\r\n                customEnterFullScreen={<BsArrowsFullscreen />}\r\n                customExitFullScreen={<BsFullscreenExit />}\r\n              />\r\n              <ZoomControl\r\n                className=\"ico\"\r\n                customZoomIn={<BsZoomIn />}\r\n                customZoomOut={<BsZoomOut />}\r\n                customZoomCenter={<BiRadioCircleMarked />}\r\n              />\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"\"\r\n                  onClick={() => setHoveredNode(\"\")}\r\n                  title=\"Reset Filters\"\r\n                >\r\n                  <GrGraphQl />\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"contents\">\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ico hide-contents\"\r\n                  onClick={() => setShowContents(false)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <GrClose />\r\n                </button>\r\n              </div>\r\n              <div className=\"ico\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ico hide-contents\"\r\n                  onClick={() => setShowContents(false)}\r\n                  title=\"Show caption and description\"\r\n                >\r\n                  <GrClose />\r\n                </button>\r\n              </div>\r\n              \r\n              \r\n              <GraphTitle filters={filtersState} />\r\n              <div className=\"panels\">\r\n                <SearchField \r\n                setConnections={setConnections}\r\n                setHoveredNode={setHoveredNode} \r\n                filters={filtersState} \r\n                \r\n                />\r\n                {/* <DescriptionPanel /> */}\r\n                 <NodesPanel\r\n                  currentNode ={hoveredNode}\r\n                  connections ={connections}\r\n                  nodes={dataset.nodes}\r\n                  filters={filtersState}\r\n                  setHoveredNode={setHoveredNode}\r\n                  setNodes={(nodes) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      nodes,\r\n                    }))\r\n                  }\r\n                  toggleNode={(node) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      nodes: filters.nodes[node] \r\n                      ? omit(filters.nodes, node) \r\n                      : { ...filters.nodes, [node]: true },\r\n                    }));\r\n                  }}\r\n                  setConnections={setConnections}\r\n                /> \r\n \r\n                {/* <Connections title={\"bla\"} currentNode={hoveredNode} \r\n                 /> */}\r\n                <ClustersPanel\r\n                  clusters={dataset.clusters}\r\n                  filters={filtersState}\r\n                  setClusters={(clusters) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      clusters,\r\n                    }))\r\n                  }\r\n                  toggleCluster={(cluster) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      clusters: filters.clusters[cluster]\r\n                        ? omit(filters.clusters, cluster)\r\n                        : { ...filters.clusters, [cluster]: true },\r\n                    }));\r\n                  }}\r\n                />\r\n                <TagsPanel\r\n                  tags={dataset.tags}\r\n                  filters={filtersState}\r\n                  setTags={(tags) =>\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      tags,\r\n                    }))\r\n                  }\r\n                  toggleTag={(tag) => {\r\n                    setFiltersState((filters) => ({\r\n                      ...filters,\r\n                      tags: filters.tags[tag] ? omit(filters.tags, tag) : { ...filters.tags, [tag]: true },\r\n                    }));\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </SigmaContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\nimport Root from \"./views/Root\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}